---
# This is the name of the workflow, visible on GitHub UI.
name: arduino

# Here we tell GitHub to run the workflow when a commit
# is pushed or a Pull Request is opened.
on: [push, pull_request]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  build:
    name: Build & push docker image
    runs-on: ubuntu-latest
    env:
      IMG_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Debug
        run: |
          echo "github.ref -> {{ github.ref }}"

      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMG_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{sha}},enable=${{ github.ref_type != 'tag' }}

       - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: >
            ${{ github.event.base_ref =='refs/heads/main' && 
            github.ref_type == 'tag' && 
            !startsWith(github.ref, 'refs/tags/v0.')}}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  publish:
    name: Publish binaries
    runs-on: ubuntu-latest

    steps:
    - name: Build
      uses: actions/checkout@v3
      run: cargo build --release

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/release/mything
        asset_name: mything
        tag: ${{ github.ref }}
        overwrite: true
        body: "This is my release text"

  # This is the name of the job - can be whatever.
  test-matrix:

    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    strategy:
      matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`, in this case a
        # total of 2.
        arduino-platform: ["arduino:samd", "arduino:avr"]
        # This is usually optional but we need to statically define the
        # FQBN of the boards we want to test for each platform. In the
        # future the CLI might automatically detect and download the core
        # needed to compile against a certain FQBN, at that point the
        # following `include` section will be useless.
        include:
          # This works like this: when the platform is "arduino:samd", the
          # variable `fqbn` is set to "arduino:samd:nano_33_iot".
          - arduino-platform: "arduino:samd"
            fqbn: "arduino:samd:nano_33_iot"
          - arduino-platform: "arduino:avr"
            fqbn: "arduino:avr:unowifi"

    # This is the platform GitHub will use to run our workflow, we
    # pick Windows for no particular reason.
    runs-on: ubuntu-latest

    # This is the list of steps this job will run.
    steps:
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@v3

      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      # We then install the platform, which one will be determined
      # dynamically by the build matrix.
      - name: Install platform
        run: |
          arduino-cli core install ${{ matrix.arduino-platform }}

      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile Sketch
        run: arduino-cli compile --fqbn ${{ matrix.fqbn }} ./blink
